var Tx = require('ethereumjs-tx');
const Web3 = require('web3');
const web3 = new Web3('https://ropsten.infura.io/v3/31af328521a44368809b6d07e32901f9');

const Account1 = "0x9D926A91965E9aa095343811442D141087eF5263";
const privateKey1 = "6547A92F3B4873190EF54D57BD305F58CD8EE8BA2078A35B0483444EE1B796ED";
const privateKey1Buffer = Buffer.from(privateKey1, 'hex');


web3.eth.getTransactionCount(Account1, (error, txCount) => {

    const data = "0x608060405234801561001057600080fd5b5060de8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063239fcf0f14602d575b600080fd5b606c60048036036020811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506082565b6040518082815260200191505060405180910390f35b6000808273ffffffffffffffffffffffffffffffffffffffff163190508091505091905056fea2646970667358221220b95d57422422cd3be2bde4044dd1d9b5e4a87ab390fe66f0927c123b63534d2b64736f6c63430006060033";
    // const dataBuffer = Buffer.from(data, 'hex');

    const txObject = {
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(800000),
        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
        data: data
    }

    // Create an instance of the transaction 
    const tx = new Tx.Transaction(txObject, {chain: 'ropsten'});
    tx.sign(privateKey1Buffer);

    //Serialize the transaction
    const serializedTx = tx.serialize();
    const raw = '0x' + serializedTx.toString('hex');

    web3.eth.sendSignedTransaction(raw, (error, txHash) => {
        console.log('Error: ', error);
        console.log('txHash: ', txHash);
    });


});
